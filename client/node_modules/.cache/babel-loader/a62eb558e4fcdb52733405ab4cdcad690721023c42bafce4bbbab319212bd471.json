{"ast":null,"code":"\"use client\";\n\n// src/use-user.ts\nimport { useMemo, useCallback } from \"react\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { user } from \"@nextui-org/theme\";\nimport { clsx, dataAttr } from \"@nextui-org/shared-utils\";\nimport { filterDOMProps } from \"@nextui-org/react-utils\";\nimport { useDOMRef } from \"@nextui-org/react-utils\";\nimport { mergeProps } from \"@react-aria/utils\";\nfunction useUser(props) {\n  const {\n    as,\n    ref,\n    name,\n    description,\n    className,\n    classNames,\n    isFocusable = false,\n    avatarProps: userAvatarProps = {},\n    ...otherProps\n  } = props;\n  const avatarProps = {\n    isFocusable: false,\n    name: typeof name === \"string\" ? name : void 0,\n    ...userAvatarProps\n  };\n  const Component = as || \"div\";\n  const shouldFilterDOMProps = typeof Component === \"string\";\n  const domRef = useDOMRef(ref);\n  const {\n    isFocusVisible,\n    isFocused,\n    focusProps\n  } = useFocusRing({});\n  const canBeFocused = useMemo(() => {\n    return isFocusable || as === \"button\";\n  }, [isFocusable, as]);\n  const slots = useMemo(() => user(), []);\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const getUserProps = useCallback(() => ({\n    ref: domRef,\n    tabIndex: canBeFocused ? 0 : -1,\n    \"data-focus-visible\": dataAttr(isFocusVisible),\n    \"data-focus\": dataAttr(isFocused),\n    className: slots.base({\n      class: baseStyles\n    }),\n    ...mergeProps(filterDOMProps(otherProps, {\n      enabled: shouldFilterDOMProps\n    }), canBeFocused ? focusProps : {})\n  }), [canBeFocused, slots, baseStyles, focusProps, otherProps]);\n  return {\n    Component,\n    className,\n    slots,\n    name,\n    description,\n    classNames,\n    baseStyles,\n    avatarProps,\n    getUserProps\n  };\n}\nexport { useUser };","map":{"version":3,"names":["useMemo","useCallback","useFocusRing","user","clsx","dataAttr","filterDOMProps","useDOMRef","mergeProps","useUser","props","as","ref","name","description","className","classNames","isFocusable","avatarProps","userAvatarProps","otherProps","Component","shouldFilterDOMProps","domRef","isFocusVisible","isFocused","focusProps","canBeFocused","slots","baseStyles","base","getUserProps","tabIndex","class","enabled"],"sources":["C:/Users/pierre/Documents/d4gen2024/app/client/node_modules/@nextui-org/user/dist/chunk-WWHWU6GY.mjs"],"sourcesContent":["\"use client\";\r\n\r\n// src/use-user.ts\r\nimport { useMemo, useCallback } from \"react\";\r\nimport { useFocusRing } from \"@react-aria/focus\";\r\nimport { user } from \"@nextui-org/theme\";\r\nimport { clsx, dataAttr } from \"@nextui-org/shared-utils\";\r\nimport { filterDOMProps } from \"@nextui-org/react-utils\";\r\nimport { useDOMRef } from \"@nextui-org/react-utils\";\r\nimport { mergeProps } from \"@react-aria/utils\";\r\nfunction useUser(props) {\r\n  const {\r\n    as,\r\n    ref,\r\n    name,\r\n    description,\r\n    className,\r\n    classNames,\r\n    isFocusable = false,\r\n    avatarProps: userAvatarProps = {},\r\n    ...otherProps\r\n  } = props;\r\n  const avatarProps = {\r\n    isFocusable: false,\r\n    name: typeof name === \"string\" ? name : void 0,\r\n    ...userAvatarProps\r\n  };\r\n  const Component = as || \"div\";\r\n  const shouldFilterDOMProps = typeof Component === \"string\";\r\n  const domRef = useDOMRef(ref);\r\n  const { isFocusVisible, isFocused, focusProps } = useFocusRing({});\r\n  const canBeFocused = useMemo(() => {\r\n    return isFocusable || as === \"button\";\r\n  }, [isFocusable, as]);\r\n  const slots = useMemo(() => user(), []);\r\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\r\n  const getUserProps = useCallback(\r\n    () => ({\r\n      ref: domRef,\r\n      tabIndex: canBeFocused ? 0 : -1,\r\n      \"data-focus-visible\": dataAttr(isFocusVisible),\r\n      \"data-focus\": dataAttr(isFocused),\r\n      className: slots.base({\r\n        class: baseStyles\r\n      }),\r\n      ...mergeProps(\r\n        filterDOMProps(otherProps, {\r\n          enabled: shouldFilterDOMProps\r\n        }),\r\n        canBeFocused ? focusProps : {}\r\n      )\r\n    }),\r\n    [canBeFocused, slots, baseStyles, focusProps, otherProps]\r\n  );\r\n  return {\r\n    Component,\r\n    className,\r\n    slots,\r\n    name,\r\n    description,\r\n    classNames,\r\n    baseStyles,\r\n    avatarProps,\r\n    getUserProps\r\n  };\r\n}\r\n\r\nexport {\r\n  useUser\r\n};\r\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA,SAASA,OAAO,EAAEC,WAAW,QAAQ,OAAO;AAC5C,SAASC,YAAY,QAAQ,mBAAmB;AAChD,SAASC,IAAI,QAAQ,mBAAmB;AACxC,SAASC,IAAI,EAAEC,QAAQ,QAAQ,0BAA0B;AACzD,SAASC,cAAc,QAAQ,yBAAyB;AACxD,SAASC,SAAS,QAAQ,yBAAyB;AACnD,SAASC,UAAU,QAAQ,mBAAmB;AAC9C,SAASC,OAAOA,CAACC,KAAK,EAAE;EACtB,MAAM;IACJC,EAAE;IACFC,GAAG;IACHC,IAAI;IACJC,WAAW;IACXC,SAAS;IACTC,UAAU;IACVC,WAAW,GAAG,KAAK;IACnBC,WAAW,EAAEC,eAAe,GAAG,CAAC,CAAC;IACjC,GAAGC;EACL,CAAC,GAAGV,KAAK;EACT,MAAMQ,WAAW,GAAG;IAClBD,WAAW,EAAE,KAAK;IAClBJ,IAAI,EAAE,OAAOA,IAAI,KAAK,QAAQ,GAAGA,IAAI,GAAG,KAAK,CAAC;IAC9C,GAAGM;EACL,CAAC;EACD,MAAME,SAAS,GAAGV,EAAE,IAAI,KAAK;EAC7B,MAAMW,oBAAoB,GAAG,OAAOD,SAAS,KAAK,QAAQ;EAC1D,MAAME,MAAM,GAAGhB,SAAS,CAACK,GAAG,CAAC;EAC7B,MAAM;IAAEY,cAAc;IAAEC,SAAS;IAAEC;EAAW,CAAC,GAAGxB,YAAY,CAAC,CAAC,CAAC,CAAC;EAClE,MAAMyB,YAAY,GAAG3B,OAAO,CAAC,MAAM;IACjC,OAAOiB,WAAW,IAAIN,EAAE,KAAK,QAAQ;EACvC,CAAC,EAAE,CAACM,WAAW,EAAEN,EAAE,CAAC,CAAC;EACrB,MAAMiB,KAAK,GAAG5B,OAAO,CAAC,MAAMG,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC;EACvC,MAAM0B,UAAU,GAAGzB,IAAI,CAACY,UAAU,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACc,IAAI,EAAEf,SAAS,CAAC;EACjF,MAAMgB,YAAY,GAAG9B,WAAW,CAC9B,OAAO;IACLW,GAAG,EAAEW,MAAM;IACXS,QAAQ,EAAEL,YAAY,GAAG,CAAC,GAAG,CAAC,CAAC;IAC/B,oBAAoB,EAAEtB,QAAQ,CAACmB,cAAc,CAAC;IAC9C,YAAY,EAAEnB,QAAQ,CAACoB,SAAS,CAAC;IACjCV,SAAS,EAAEa,KAAK,CAACE,IAAI,CAAC;MACpBG,KAAK,EAAEJ;IACT,CAAC,CAAC;IACF,GAAGrB,UAAU,CACXF,cAAc,CAACc,UAAU,EAAE;MACzBc,OAAO,EAAEZ;IACX,CAAC,CAAC,EACFK,YAAY,GAAGD,UAAU,GAAG,CAAC,CAC/B;EACF,CAAC,CAAC,EACF,CAACC,YAAY,EAAEC,KAAK,EAAEC,UAAU,EAAEH,UAAU,EAAEN,UAAU,CAC1D,CAAC;EACD,OAAO;IACLC,SAAS;IACTN,SAAS;IACTa,KAAK;IACLf,IAAI;IACJC,WAAW;IACXE,UAAU;IACVa,UAAU;IACVX,WAAW;IACXa;EACF,CAAC;AACH;AAEA,SACEtB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}